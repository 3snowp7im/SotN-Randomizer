#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const os = require('os')
const Worker = require('worker_threads').Worker
const constants = require('./constants')
const errors = require('./errors')
const extension = require('./extension')
const presets = require('./build/presets')
const randomizeRelics = require('./randomize_relics')
const randomizeItems = require('./randomize_items')
const randomizeMusic = require('./randomize_music')
const relics = require('./relics')
const util = require('./util')
let version = require('./package').version

const optionsHelp = [
  'The options string may contain any of the following:',
  '  "p" for preset (`--help preset`)',
  '  "d" for enemy drops (`--help drops`)',
  '  "e" for starting equipment (`--help equipment`)',
  '  "i" for item locations (`--help items`)',
  '  "b" for prologue rewards (`--help rewards`)',
  '  "r" for relic locations (`--help relics`)',
  '  "m" for music',
  '  "t" for turkey mode',
  '',
  'The default randomization mode is "'
    +  constants.defaultOptions
    + '", which randomizes everything.',
  '',
  'Examples:',
  '  $0 --opt d   # Only randomize enemy drops.',
  '  $0 --opt di  # Randomize drops and item locations.',
  '  $0           # Randomize everything (default mode).',
].join('\n')

const dropsHelp = [
  'Enemy drop randomization can be toggled with the "d" switch. Drops may',
  'also be specified using argument syntax.',
  '',
  'Drops format:',
  '  d[:<enemy>[-<level>][:[<item>][-[<item>]]][:...]',
  '',
  'Enemies and items are specified by removing any non-alphanumeric',
  'characters from their name. Enemies with the same name can be dis-',
  'ambiguated by specifying their level.',
  '',
  'A wildcard character ("*") can be used to replace items for all enemies.',
  '',
  'The global drop table can be edited by specifying "Global" as the enemy',
  'name. Please note that there are 32 items in the global drop table.',
  '',
  'Examples:',
  '  d:Zombie:Cutlass-Bandana    Zombie drops Cutlass and Bandana',
  '  d:Slinger:-Orange           Replace Slinger rare drop with orange',
  '  d:MedusaHead-8:             Medusa Head level 8 drops nothing',
  '  d:*:Grapes-Potion           Every enemy drops Grapes and Potion',
  '  d:Global:Apple-Orange-Tart  Replace first 3 items in global drops table',
  '                              with Apple, Orange, and Tart',
  '',
  'If other randomization options follow a drop, they must also be',
  'separated from the drop with a comma:',
  '  $0 --opt d:Slinger:-Orange,ipt',
].join('\n')

const equipmentHelp = [
  'Starting equipment randomization can be toggled with the "e" switch.',
  'Equipment may also be specified using argument syntax.',
  '',
  'Equipment format:',
  '  e[:<slot>[:<item>]][:...]',
  '',
  'Items are specified by removing any non-alphanumeric characters from',
  'their name.',
  '',
  'Slot is one of:',
  '  "r" for right hand',
  '  "l" for left hand',
  '  "h" for head',
  '  "b" for body',
  '  "c" for cloak',
  '  "o" for other',
  '  "a" for Axe Lord Armor (Axe Armor mode only)',
  '  "x" for Lapis Lazuli (Luck mode only)',
  '',
  'Examples:',
  '  e:l:Marsil:FireShield  Marsil in left hand, Fire Shield in right',
  '  e:o:Duplicator         Duplicator in other slot',
  '  e:c:                   No cloak',
  '',
  'If other randomization options follow an equip, they must also be',
  'separated from the equip with a comma:',
  '  $0 --opt e:o:Duplicator,dpt',
].join('\n')

const itemsHelp = [
  'Item location randomization can be toggled using the "i" switch. Items',
  'may be placed in specific locations using argument syntax.',
  '',
  'Items format:',
  '  i[:<zone>:<item>[-<index>]:<replacement>][:...]',
  '',
  'Items are specified by removing any non-alphanumeric characters from',
  'their name. If a zone contains multiple occurences of the same item,',
  'it can be disambuated by specifying its index.',
  '',
  'A wildcard character ("*") can be used for the zone and/or the item. When',
  'used as the zone, the replacement will occur in every zone. When used as',
  'the item, every item will be replaced.',
  '',
  'Zone is one of:',
  '  ST0   (Final Stage: Bloodlines)',
  '  ARE   (Colosseum)',
  '  CAT   (Catacombs)',
  '  CHI   (Abandoned Mine)',
  '  DAI   (Royal Chapel)',
  '  LIB   (Long Library)',
  '  NO0   (Marble Gallery)',
  '  NO1   (Outer Wall)',
  '  NO2   (Olrox\'s Quarters)',
  '  NO3   (Castle Entrance)',
  '  NO4   (Underground Caverns)',
  '  NZ0   (Alchemy Laboratory)',
  '  NZ1   (Clock Tower)',
  '  TOP   (Castle Keep)',
  '  RARE  (Reverse Colosseum)',
  '  RCAT  (Floating Catacombs)',
  '  RCHI  (Cave)',
  '  RDAI  (Anti-Chapel)',
  '  RLIB  (Forbidden Library)',
  '  RNO0  (Black Marble Gallery)',
  '  RNO1  (Reverse Outer Wall)',
  '  RNO2  (Death Wing\'s Lair)',
  '  RNO3  (Reverse Entrance)',
  '  RNO4  (Reverse Caverns)',
  '  RNZ0  (Necromancy Laboratory)',
  '  RNZ1  (Reverse Clock Tower)',
  '  RTOP  (Reverse Castle Keep)',
  '',
  'Examples:',
  '  i:ARE:BloodCloak:Banana     Replace Blood Cloak with Banana',
  '  i:NO3:PotRoast:LibraryCard  Replace Pot Roast with Library Card',
  '  i:TOP:Turkey-2:Peanuts      Replace 2nd Turkey with Peanuts',
  '  i:CAT:*:Orange              Replace every item in Catacombs with Orange',
  '  i:*:MannaPrism:Potion       Replace every Manna Prism with Potion',
  '  i:*:*:Grapes                Replace every item with Grapes',
  '',
  'If other randomization options follow an item, they must also be',
  'separated from the item with a comma:',
  '  $0 --opt i:TOP:Turkey-2:Peanuts,dpt',
].join('\n')

const rewardsHelp = [
  'Prologue reward randomization can be toggled with the "b" switch.',
  'Rewards may be specified using argument syntax.',
  '',
  'Rewards format:',
  '  b[:<reward>[:<item>]][:...]',
  '',
  'Reward is one of:',
  '  "h" for Heart Refresh',
  '  "n" for Neutron Bomb',
  '  "p" for Potion',
  '',
  'Items are specified by removing any non-alphanumeric characters from',
  'their name.',
  '',
  'Examples:',
  '  b:h:MannaPrism   Replace Heart Refresh with Manna Prism',
  '  b:n:PowerofSire  Replace Neutron Bomb with Power of Sire',
  '  b:p:BuffaloStar  Replace Potion with Buffalo Star',
  '',
  'If other randomization options follow an item, they must also be',
  'separated from the item with a comma:',
  '  $0 --opt b:h:MannaPrism,dt',
].join('\n')

const relicsHelp = [
  'Relic location randomization can be toggled with the "r" switch, and',
  'custom relic location locks may be specified using argument syntax.',
  '',
  'A relic location lock sets the abilities required to access a relic',
  'location. Each relic location may be guarded by multiple locks, and the',
  'location will be open to the player once they have all abilities',
  'comprising any single lock.',
  '',
  'A location can also specify escape requirements. These are combinations of',
  'abilities, any one of which must be satisified by all progression routes',
  'granting access to the location. This is intended to prevent the player',
  'from accessing an area that they might not have the ability to escape',
  'from. Note that is is possible for the location itself to grant one of the',
  'abilities required to escape from it.',
  '',
  'Relics format:',
  '  r[:<location>[:<ability>[-<ability>...]]'
    + '[+<ability>[-<ability>...]]][:...]',
  '',
  'Relic locations and the abilities they provide are identified by one',
  'letter:',
  '  (' + constants.RELIC.SOUL_OF_BAT + ') Soul of Bat',
  '  (' + constants.RELIC.FIRE_OF_BAT + ') Fire of Bat',
  '  (' + constants.RELIC.ECHO_OF_BAT + ') Echo of Echo',
  '  (' + constants.RELIC.FORCE_OF_ECHO + ') Force of Echo',
  '  (' + constants.RELIC.SOUL_OF_WOLF + ') Soul of Wolf',
  '  (' + constants.RELIC.POWER_OF_WOLF + ') Power of Wolf',
  '  (' + constants.RELIC.SKILL_OF_WOLF + ') Skill of Wolf',
  '  (' + constants.RELIC.FORM_OF_MIST + ') Form of Mist',
  '  (' + constants.RELIC.POWER_OF_MIST + ') Power of Mist',
  '  (' + constants.RELIC.GAS_CLOUD + ') Gas Cloud',
  '  (' + constants.RELIC.CUBE_OF_ZOE + ') Cube of Zoe',
  '  (' + constants.RELIC.SPIRIT_ORB + ') Spirit Orb',
  '  (' + constants.RELIC.GRAVITY_BOOTS + ') Gravity Boots',
  '  (' + constants.RELIC.LEAP_STONE + ') Leap Stone',
  '  (' + constants.RELIC.HOLY_SYMBOL + ') Holy Symbol',
  '  (' + constants.RELIC.FAERIE_SCROLL + ') Faerie Scroll',
  '  (' + constants.RELIC.JEWEL_OF_OPEN + ') Jewel of Open',
  '  (' + constants.RELIC.MERMAN_STATUE + ') Merman Statue',
  '  (' + constants.RELIC.BAT_CARD + ') Bat Card',
  '  (' + constants.RELIC.GHOST_CARD + ') Ghost Card',
  '  (' + constants.RELIC.FAERIE_CARD + ') Faerie Card',
  '  (' + constants.RELIC.DEMON_CARD + ') Demon Card',
  '  (' + constants.RELIC.SWORD_CARD + ') Sword Card',
  '  (' + constants.RELIC.SPRITE_CARD + ') Sprite Card',
  '  (' + constants.RELIC.NOSEDEVIL_CARD + ') Nosedevil Card',
  '  (' + constants.RELIC.HEART_OF_VLAD + ') Heart of Vlad',
  '  (' + constants.RELIC.TOOTH_OF_VLAD + ') Tooth of Vlad',
  '  (' + constants.RELIC.RIB_OF_VLAD + ') Rib of Vlad',
  '  (' + constants.RELIC.RING_OF_VLAD + ') Ring of Vlad',
  '  (' + constants.RELIC.EYE_OF_VLAD + ') Eye of Vlad',
  '  (' + constants.RELIC.SPIKE_BREAKER + ') Spike Breaker',
  '  (' + constants.RELIC.SILVER_RING + ') Silver Ring',
  '  (' + constants.RELIC.GOLD_RING + ') Gold Ring',
  '  (' + constants.RELIC.HOLY_GLASSES + ') Holy Glasses',
  '',
  'Examples:',
  '  r:B:L      Soul of Bat relic location requires Leap Stone.',
  '  r:y:LV-MP  Holy Symbol relic location requires Leap Stone + Gravity',
  '             Boots OR Form of Mist + Power of Mist.',
  '',
  'Note that relic location extensions use the name of the item being',
  'replaced as their identifier:',
  '  r:Mormegil:JL-JV  Mormegil location requires Jewel of Open + Leap Stone',
  '                    OR Jewel of Open + Gravity Boots',
  '',
  'Escape requirements follow the ability locks and are separated by a "+":',
  '  r:H:GS+B-LV-MP  Holy Glasses location requires Gold + Silver Rings for',
  '                  access and Soul of Bat, Leap Stone + Gravity Boots, or',
  '                  Mist + Power of Mist for escape.',
  '',
  'Locks for different locations can be specified by separating each',
  'location by a colon:',
  '  r:B:L:y:LV-MP',
  '',
  'Relic locations extension can be specified with the letter "x". Extension',
  'will allow progressione to be placed in locations that do not contain',
  'progression in the vanilla game.',
  '',
  'There are two extension modes:',
  '  guarded    Adds Crystal Cloak, Mormegil, Dark Blade, and Ring of Arcana',
  '             to the location pool. This is the default extension mode when',
  '             when enabled without an argument.',
  '  equipment  Adds equipment tiles to the location pool.',
  '',
  'Extension format:',
  '  x:<mode>',
  '',
  'Examples:',
  '  r:x:guarded    Enables guarded extension mode.',
  '  r:x:equipment  Enables equipment extension mode.',
  '',
  'An optional complexity target can specify a set of abilities that are',
  'considered win conditions. A minimum and maximum complexity depth specify',
  'how many relics must be obtained in series to unlock a win condition:',
  '  r:3:LV-MP    Leap Stone + Gravity Boots OR Form of Mist + Power of Mist',
  '               required to complete seed with a minimum depth of 3.',
  '  r:3-5:SG     Silver + Gold ring required to complete seed with a minimum',
  '               depth of 3 and a maximum depth of 5.',
  '',
  'If other randomization options follow a lock, they must also be',
  'separated from the lock with a comma:',
  '  $0 --opt r:B:L:y:LG-MP,dpt',
].join('\n')

const presetHelp = [
  'Presets specify collection of randomization options. A preset is enabled',
  'by using argument syntax.',
  '',
  'Preset format:',
  '  p:<preset>',
  '',
  'This randomizer has several built-in presets:',
].concat(presets.map(function(meta) {
  return '  ' + meta.id + (meta.id === 'safe' ? ' (default)' : '')
})).concat([
  '',
  'Use `--help <preset>` for information on a specific scheme.',
  '',
  'Examples:',
  '  p:safe     Use safe preset.',
  '  p:agonize  Use agonize preset.',
  '',
  'When using the `$0` utility, you can use the `--preset` shorthand to',
  'specify a preset:',
  '  $0 -p speedrun  # Use speedrun preset',
]).join('\n')

function presetMetaHelp(preset) {
  const options = preset.options()
  let locations = relics.filter(function(relic) {
    return !relic.extension
  })
  const extensions = []
  if ('extension' in options.relicLocations) {
    switch (options.relicLocations.extension) {
    case constants.EXTENSION.EQUIPMENT:
      extensions.push(constants.EXTENSION.EQUIPMENT)
    case constants.EXTENSION.GUARDED:
      extensions.push(constants.EXTENSION.GUARDED)
    }
  }
  const extendedLocations = extension.filter(function(location) {
    return extensions.indexOf(location.extension) !== -1
  })
  locations = locations.concat(extendedLocations)
  locations = locations.map(function(location) {
    let id
    if ('ability' in location) {
      id = location.ability
    } else {
      id = location.name
    }
    return {
      id: id,
      name: location.name,
      ability: location.ability,
    }
  })
  let info = [
    preset.name + ' by ' + preset.author,
    preset.description,
    '',
  ].concat(locations.map(function(location) {
    let label
    if (location.ability) {
      label = '  (' + location.ability + ') ' + location.name.slice(0, 21)
    } else {
      label = '      ' + location.name.slice(0, 21)
    }
    label += Array(28).fill(' ').join('')
    let locks
    let escapes
    if (options.relicLocations[location.id]) {
      locks = options.relicLocations[location.id].filter(function(lock) {
        return lock[0] !== '+'
      })
      escapes = options.relicLocations[location.id].filter(function(lock) {
        return lock[0] === '+'
      }).map(function(lock) {
        return lock.slice(1)
      })
    }
    return label.slice(0, 28) + location.id.replace(/[^a-zA-Z0-9]/g, '') + ':'
      + (locks ? locks.join('-') : '')
      + (escapes && escapes.length ? '+' + escapes.join('-') : '')
  }))
  const keys = Object.getOwnPropertyNames(options.relicLocations)
  const target = keys.filter(function(key) {
    return /^[0-9]+(-[0-9]+)?$/.test(key)
  }).pop()
  if (target) {
    const parts = target.split('-')
    info.push('')
    info.push('  Complexity target: '
              + parts[0] + ' <= depth'
              + (parts.length === 2 ? ' <= ' + parts[1] : ''))
    info.push('  Goals: ' + options.relicLocations[target].join('-'))
  }
  return info.join('\n')
}

let eccEdcCalc
const yargs = require('yargs')
  .strict()
  .usage('$0 [options] [url]')
  .option('in-bin', {
    alias: 'i',
    describe: 'Path to vanilla .bin file',
    conflicts: ['no-seed'],
    type: 'string',
    requiresArg: true,
  })
  .option('out-bin', {
    alias: 'o',
    describe: 'Path to write randomized .bin file',
    implies: ['in-bin'],
    type: 'string',
    requiresArg: true,
  })
  .option('seed', {
    alias: 's',
    describe: 'Seed',
    type: 'string',
    requiresArg: true,
  })
  .option('options', {
    alias: 'opt',
    describe: 'Randomizations (`--help options`)',
    conflits: ['preset', 'preset-file'],
    type: 'string',
    requiresArg: true,
  })
  .option('expect-checksum', {
    alias: 'e',
    describe: 'Verify checksum',
    conflicts: ['no-seed'],
    type: 'string',
    requiresArg: true,
  })
  .option('url', {
    alias: 'u',
    description: 'Print seed url using optional base',
    type: 'string',
  })
  .option('race', {
    alias: 'r',
    describe: 'Same as -uvv',
    type: 'boolean',
  })
  .option('preset', {
    alias: 'p',
    describe: 'Use preset',
    conflicts: ['options', 'preset-file'],
    type: 'string',
    requiresArg: true,
  })
  .option('preset-file', {
    alias: 'f',
    describe: 'Use preset file',
    conflicts: ['options', 'preset'],
    type: 'string',
    requiresArg: true,
  })
  .option('no-seed', {
    alias: 'n',
    describe: 'Disable seed generation',
    conflicts: ['in-bin', 'expect-checksum'],
    type: 'boolean',
  })
  .option('verbose', {
    alias: 'v',
    describe: 'Verbosity level',
    type: 'count',
  })
  .option('compat', {
    type: 'string',
    requiresArg: true,
  })
  .hide('compat')
  .help(false)
  .option('help', {
    alias: 'h',
    describe: 'Show help',
    type: 'string',
  })
  .demandCommand(0, 1)
const argv = yargs.argv
let options
let seed
let baseUrl
let expectChecksum
let haveChecksum
// Require at least one argument.
if (process.argv.length < 3) {
  yargs.showHelp()
  console.error('\nAt least 1 argument or option required')
  process.exit(1)
}
// Check for help.
if ('help' in argv) {
  if (!argv.help) {
    yargs.showHelp()
    process.exit()
  }
  const topics = {
    options: optionsHelp,
    drops: dropsHelp,
    equipment: equipmentHelp,
    items: itemsHelp,
    rewards: rewardsHelp,
    relics: relicsHelp,
    preset: presetHelp,
  }
  const script = path.basename(process.argv[1])
  Object.getOwnPropertyNames(topics).forEach(function(topic) {
    topics[topic] = topics[topic].replace(/\$0/g, script)
  }, {})
  presets.forEach(function(meta) {
    topics[meta.id] = presetMetaHelp(meta)
  })
  if (argv.help in topics) {
    console.log(topics[argv.help])
    process.exit()
  } else {
    yargs.showHelp()
    console.error('\nUnknown help topic: ' + argv.help)
    process.exit(1)
  }
}
if (argv.compat) {
  version = argv.compat
}
// Check for seed string.
if ('seed' in argv) {
  if ('noSeed' in argv) {
    yargs.showHelp()
    console.error('\nCannot specify seed if seed generation is disabled')
    process.exit(1)
  }
  seed = argv.seed.toString()
}
// Check for base url.
if (argv.url) {
  baseUrl = argv.url
}
// If seed generation is disabled, assume url output.
if (argv.noSeed) {
  argv.url = ''
}
// Check for expected checksum.
if ('expectChecksum' in argv) {
  if (!('seed' in argv) && !argv._[0]) {
    yargs.showHelp()
    console.error('\nCannot specify checksum if not providing seed')
    process.exit(1)
  }
  if (!argv.expectChecksum.match(/^[0-9a-f]{1,3}$/)) {
    yargs.showHelp()
    console.error('\nInvalid checksum string')
    process.exit(1)
  }
  expectChecksum = parseInt(argv.expectChecksum, 16)
  haveChecksum = true
}
// Check for randomization string.
if ('options' in argv) {
  try {
    options = util.optionsFromString(argv.options)
  } catch (e) {
    yargs.showHelp()
    console.error('\n' + e.message)
    process.exit(1)
  }
}
// Check for preset.
if ('preset' in argv) {
  try {
    options = util.optionsFromString('p:' + argv.preset)
  } catch (e) {
    yargs.showHelp()
    console.error('\n' + e.message)
    process.exit(1)
  }
}
// Check for preset file.
if ('presetFile' in argv) {
  const relative = path.relative(path.dirname(__filename), argv.presetFile)
  const preset = require('./' + relative)
  options = util.PresetBuilder.fromJSON(preset).build().options()
}
// Check for seed url.
if (argv._[0]) {
  if ('noSeed' in argv) {
    yargs.showHelp()
    console.error('\nCannot specify url if seed generation is disabled')
    process.exit(1)
  }
  if ('presetFile' in argv) {
    yargs.showHelp()
    console.error('\nCannot specify url if using a preset file')
    process.exit(1)
  }
  let url
  try {
    url = util.optionsFromUrl(argv._[0])
    argv.race = true
    options = url.options
    seed = url.seed
    expectChecksum = url.checksum
    if (expectChecksum) {
      haveChecksum = true
    }
  } catch (e) {
    yargs.showHelp()
    console.error('\nInvalid url')
    process.exit(1)
  }
  if (seed === null) {
    yargs.showHelp()
    console.error('\nUrl does not contain seed')
    process.exit(1)
  }
  // Ensure seeds match if given using --seed.
  if ('seed' in argv && argv.seed.toString() !== seed) {
    yargs.showHelp()
    console.error('\nArgument seed is not url seed')
    process.exit(1)
  }
  // Ensure randomizations match if given using --options.
  const optionStr = util.optionsToString(options)
  if (('options' in argv && argv.options !== optionStr)
      || ('preset' in argv && 'p:' + argv.preset !== optionStr)) {
    yargs.showHelp()
    console.error('\nArgument randomizations are not url randomizations')
    process.exit(1)
  }
  // Ensure checksum match if given using --expect-checksum.
  if ('expectChecksum' in argv && url.checksum != expectChecksum) {
    yargs.showHelp()
    console.error('\nArgument checksum is not url checksum')
    process.exit(1)
  }
}
// Set options for --race.
if (argv.race) {
  argv.url = ''
  if (argv.verbose === 0) {
    argv.verbose = 2
  }
}
// Create default options if none provided.
if (typeof(seed) === 'undefined' && !argv.noSeed) {
  seed = (new Date()).getTime().toString()
}
if (!options) {
  options = util.optionsFromString(constants.defaultOptions)
}
// Set misc options.
if ('verbose' in argv) {
  options.verbose = argv.verbose
}
info = util.newInfo()
// Add seed to log info if not provided through command line.
if (!argv.noSeed && (!('url' in argv) || argv._[0])) {
  info[1]['Seed'] = seed
}
let fd
let size
// Read bin file if provided.
if ('inBin' in argv) {
  eccEdcCalc = require('./ecc-edc-recalc-js')
  if (!('outBin' in argv)) {
    const stats = fs.statSync(argv.inBin)
    fd = fs.openSync(argv.inBin, 'r+')
    size = stats.size
  }
}

(async function randomize() {
  try {
    let check
    let checksum
    if (!argv.noSeed) {
      check = new util.checked(fd)
      let applied
      try {
        applied = util.Preset.options(options)
      } catch (err) {
        yargs.showHelp()
        console.error('\n' + err.message)
        process.exit(1)
      }
      try {
        let rng
        let result
        // Place planned progression items.
        const removed = randomizeItems.placePlannedItems(applied)
        // Randomize relics.
        const cores = os.cpus().length
        const workers = Array(util.workerCountFromCores(cores))
        for (let i = 0; i < workers.length; i++) {
          workers[i] = new Worker('./worker.js')
        }
        result = await util.randomizeRelics(
          version,
          options,
          seed,
          removed,
          workers,
          3,
        )
        util.mergeInfo(info, result.info)
        // Write relics mapping.
        rng = new require('seedrandom')(util.saltSeed(
          version,
          options,
          seed,
          0,
        ))
        result = randomizeRelics.writeRelics(rng, applied, result)
        check.apply(result.data)
        // Randomize items.
        result = await util.randomizeItems(
          version,
          options,
          seed,
          new Worker('./worker.js'),
          1,
          result.items,
        )
        check.apply(result.data)
        util.mergeInfo(info, result.info)
        // Randomize music.
        rng = new require('seedrandom')(util.saltSeed(
          version,
          options,
          seed,
          2,
        ))
        result = randomizeMusic(rng, applied)
        check.apply(result)
      } catch (err) {
        console.error('Seed:  ' + seed)
        if (errors.isError(err)) {
          console.error('Error: ' + err.message)
        } else {
          console.error(err.stack)
        }
        process.exit(1)
      }
      util.setSeedText(check, seed, options.preset)
      checksum = check.sum()
      // Verify expected checksum matches actual checksum.
      if (haveChecksum && expectChecksum !== checksum) {
        console.error('Checksum mismatch.')
        process.exit(1)
      }
    }
    // Show url if not provided as arg.
    if ('url' in argv && !argv._[0]) {
      console.log(util.optionsToUrl(
        version,
        options,
        checksum || '',
        seed || '',
        baseUrl,
      ))
    }
    // Print spoilers.
    if (argv.verbose >= 1) {
      const text = util.formatInfo(info, argv.verbose)
      if (text.length) {
        console.log(text)
      }
    }
    if (!argv.noSeed) {
      // Read input file if this is not an in-place randomization.
      if ('outBin' in argv) {
        fd = fs.readFileSync(argv.inBin)
        size = fd.length
        const writer = new util.checked(fd)
        writer.apply(check)
      }
      // Write error detection codes.
      if (fd) {
        eccEdcCalc(fd, size)
      }
      // Write randomized bin.
      if (typeof(fd) === 'object') {
        fs.writeFileSync(argv.outBin, fd)
      }
    }
  } finally {
    if (typeof(fd) === 'number') {
      fs.closeSync(fd)
    }
  }
})()
