(function(self) {

  function AssertionError(message) {
    this.name = 'AssertionError'
    this.message = message
    this.stack = new Error(this.message).stack
  }

  const _AssertionError = function() {}
  _AssertionError.prototype = Error.prototype
  AssertionError.prototype = new _AssertionError()

  function RandomizedFileError() {
    this.name = 'RandomizedFileError'
    this.message = 'File was previously randomized'
    this.stack = new Error(this.message).stack
  }

  const _RandomizedFileError = function() {}
  _RandomizedFileError.prototype = Error.prototype
  RandomizedFileError.prototype = new _RandomizedFileError()

  function VersionError() {
    this.name = 'VersionError'
    this.message = 'Seed generated by a different version of the randomizer.'
    this.stack = new Error(this.message).stack
  }

  const _VersionError = function() {}
  _VersionError.prototype = Error.prototype
  VersionError.prototype = new _VersionError()

  function SoftlockError() {
    this.name = 'SoftlockError'
    this.message = 'Softlock generated'
    this.stack = new Error(this.message).stack
  }

  const _SoftlockError = function() {}
  _SoftlockError.prototype = Error.prototype
  SoftlockError.prototype = new _SoftlockError()

  function ComplexityError() {
    this.name = 'ComplexityError'
    this.message = 'Could not meet difficulty target'
    this.stack = new Error(this.message).stack
  }

  const _ComplexityError = function() {}
  _ComplexityError.prototype = Error.prototype
  ComplexityError.prototype = new _ComplexityError()

  const errors = {
    AssertionError,
    RandomizedFileError,
    VersionError,
    SoftlockError,
    ComplexityError,
  }

  function isError(error) {
    const names = Object.getOwnPropertyNames(errors)
    for (let i = 0; i < names.length; i++) {
      if (error instanceof errors[names[i]] || error.name === names[i]) {
        return true
      }
    }
  }

  const exports = Object.assign({}, errors, {
    isError: isError,
  })
  if (self) {
    self.sotnRando = Object.assign(self.sotnRando || {}, {
      errors: exports,
    })
  } else {
    module.exports = exports
  }
})(typeof(self) !== 'undefined' ? self : null)
