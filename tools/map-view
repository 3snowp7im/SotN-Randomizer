#!/usr/bin/env node
// This tool parses a SotN bin and displays map data.
// Usage: tools/map-view <path-to-rom> <zone>

require('colors')
const fs = require('fs')
const constants = require('../src/constants')
const items = require('../src/items')
const relics = require('../src/relics')
const util = require('../src/util')

const ZONE = constants.ZONE
const zones = constants.zones

const colors = [
  'gray',
  'red',
  'green',
  'yellow',
  'blue',
  'magenta',
  'cyan',
  'white',
]

// Read input bin.
const bin = fs.readFileSync(process.argv[2])

// Read zone data.
const zoneId = ZONE[process.argv[3]]
const zone = zones[zoneId]
const data = util.restoreFile(bin, zone)

const filled = (String.fromCharCode(9608) + String.fromCharCode(9608))

// Read map as visual aid.
const map = util.tileData(data)

// Read entities.
const rooms = util.entityData(data).map(function(entities, index) {
  const lines = []
  lines.push('room ' + index)
  if (map[index]) {
    lines.push(map[index].map(function(row) {
      return row.map(function(tile) {
        return tile ? filled[colors[tile % colors.length]] : '  '
      }).join('')
    }).join('\n'))
  }
  entities.forEach(function(entity) {
    if (util.isCandle(zone, entity)) {
      const state = (entity.data[9] << 8) + entity.data[8]
      const candle = (state & 0xf000) >>> 8
      const id = state & 0x0fff
      const item = util.itemFromTileId(items, id)
      lines.push('  candle: ' + item.name)
    } else if (util.isRelic(entity)) {
      const relic = relics.filter(function(relic) {
        return relic.relicId === entity.data[8]
      })[0]
      lines.push('  relic: ' + relic.name)
    } else if (util.isItem(entity)) {
      const index = entity.data[8]
      const id = data.readUInt16LE(zone.items + 0x2 * index)
      const item = util.itemFromTileId(items, id)
      if (item) {
        lines.push('  item: ' + item.name)
      } else {
        lines.push('  item: ' + util.numToHex(index))
      }
      lines.push('    id: ' + util.numToHex(id) + ',')
      lines.push('    index: ' + index + ',')
    } else if (util.isContainer(zone, entity)) {
      const item = util.containedItem(data, zone, entity)
      if (item.item) {
        lines.push('  container: ' + item.item.name)
        if (item.item.id) {
          lines.push('    id: ' + util.numToHex(item.item.id) + ',')
        }
      } else {
        lines.push('  container: ' + util.numToHex(index))
      }
      if ('index' in item) {
        lines.push('    index: ' + item.index + ',')
      }
    } else {

      switch (entity.data.toString('hex').substring(8,10)) {
      case '05':
        lines.push('  red door:')
        break
      case '08':
        lines.push('  room foreground:')
        break
      case '09':
        lines.push('  stage name: ' + process.argv[3])
        break
      case '0a':
        lines.push('  infinite item: Peanuts')
        break
      default:
        lines.push('  entity:')
        break
      }
    }
    lines.push('    offsets: [ ' + entity.addresses.map(function(address) {
      return util.numToHex(address)
    }).join(', ') + ' ],')
    lines.push('    rom: [ ' + entity.addresses.map(function(address) {
      return util.numToHex(util.romOffset(zone, address))
    }).join(', ') + ' ],')
    lines.push('    data:    ' + entity.data.toString('hex') + ',')
    lines.push('    X pos:   ' + entity.data.toString('hex').substring(2,4) + entity.data.toString('hex').substring(0,2) + '|  Y pos:   ' + entity.data.toString('hex').substring(6,8) + entity.data.toString('hex').substring(4,6))
    lines.push('    type:    ' + entity.data.toString('hex').substring(10,12) + entity.data.toString('hex').substring(8,10) + '|  slot:    ' + entity.data.toString('hex').substring(12,14) + entity.data.toString('hex').substring(14,16))
    lines.push('    subtype: ' + entity.data.toString('hex').substring(16,18) + entity.data.toString('hex').substring(18,20))
  })
  return lines.join('\n')
})

// Dump data.
console.log(rooms.join('\n\n'))
