#!/usr/bin/env node
// This tool parses a SotN bin for candle data, adds it the global item list
// and prints the modified list to stdout.
// Usage: tools/candle-data <path-to-rom> [indent-level]

const fs = require('fs')
const constants = require('../src/constants')
const items = require('../src/items')
const util = require('../src/util')

const tileIdOffset = constants.tileIdOffset
const TYPE = constants.TYPE
const typeNames = constants.typeNames
const ZONE = constants.ZONE
const zones = constants.zones

function isCandleFilter(zone) {
  return function(entity) {
    return util.isCandle(zone, entity)
  }
}

function getZoneCandles(zone, data) {
  data = util.restoreFile(data, zone)
  const entities = util.entityData(data).reduce(function(flat, array) {
    return flat.concat(array)
  }, [])
  return entities.filter(isCandleFilter(zone)).reduce(function(map, entity) {
    const state = (entity.data[9] << 8) + entity.data[8]
    const candle = (state & 0xf000) >>> 8
    const id = state & 0x0fff
    const item = util.itemFromTileId(items, id)
    map[entity.data.toString('hex')] = {
      item: item,
      zones: [ zone.id ],
      entities: entity.addresses,
      candle: candle,
    }
    return map
  }, {})
}

function findCandleAddresses(zone, data) {
  const candles = getZoneCandles(zone, data)
  if (zone.id === ZONE.NO3) {
    const dups = getZoneCandles(zones[ZONE.NP3], data)
    Object.getOwnPropertyNames(candles).forEach(function(key) {
      if (key in dups) {
        Array.prototype.push.apply(candles[key].zones, dups[key].zones)
        Array.prototype.push.apply(candles[key].entities, dups[key].entities)
      }
    })
  }
  Object.getOwnPropertyNames(candles).forEach(function(key) {
    const item = candles[key].item
    delete candles[key].item
    item.tiles = item.tiles || []
    item.tiles.push(candles[key])
  })
}

// Clear existing candle data from item list.
items.filter(function(item) {
  return 'tiles' in item
}).forEach(function(item) {
  item.tiles = item.tiles.filter(function(tile) {
    return !('candle' in tile)
  })
})

// Read input bin.
const bin = fs.readFileSync(process.argv[2])

// Read candle data.
zones.filter(function(zone) {
  return zone.id !== ZONE.NP3
}).forEach(function(zone) {
  findCandleAddresses(zone, bin)
})

// Format data.
const indent = parseInt(process.argv[3] || 2)
const spaces = Array(indent).fill(' ').join('')
console.log(spaces + 'const items = ' + util.formatObject(items, indent))
