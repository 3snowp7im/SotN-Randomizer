#!/usr/bin/env node
// This tool parses a SotN bin for candle data, adds it the global item list
// and prints the modified list to stdout.
// Usage: tools/candle-data <path-to-rom> [indent-level]

const fs = require('fs')
const constants = require('../constants')
const items = require('../items')
const util = require('../util')

const tileIdOffset = constants.tileIdOffset
const TYPE = constants.TYPE
const typeNames = constants.typeNames
const ZONE = constants.ZONE
const zones = constants.zones

function isCandleFilter(zoneId) {
  return function(entity) {
    return util.isCandle(zoneId, entity)
  }
}

function findCandleAddresses(zoneId, zone, data) {
  data = util.restoreFile(data, zone)
  const entities = util.entityData(data).reduce(function(flat, array) {
    return flat.concat(array)
  }, [])
  entities.filter(isCandleFilter(zoneId)).forEach(function(entity) {
    const state = (entity.data[9] << 8) + entity.data[8]
    const candle = (state & 0xf000) >>> 8
    const id = state & 0x0fff
    const item = util.itemFromTileId(items, id)
    item.tiles = item.tiles || []
    item.tiles.push({
      zone: zoneId,
      addresses: entity.addresses.map(function(address) {
        return util.romOffset(zone, address + 8)
      }),
      candle: candle,
    })
  })
}

// Clear existing candle data from item list.
items.filter(function(item) {
  return !!item.tiles
}).forEach(function(item) {
  item.tiles = (item.tiles || []).filter(function(tile) {
    return typeof(tile.candle) === 'undefined'
  })
})

// Read input bin.
const bin = fs.readFileSync(process.argv[2])

// Read candle data.
zones.forEach(function(zone, zoneId) {
  findCandleAddresses(zoneId, zone, bin)
})

// Format data.
const indent = parseInt(process.argv[3] || 2)
const spaces = Array(indent).fill(' ').join('')
console.log(spaces + 'const items = ' + util.formatObject(items, indent))
