#!/usr/bin/env node
// This tool parses a SotN bin for entity data for a specific zone.
// Usage: tools/entity-dump <path-to-rom> <zone>

const fs = require('fs')
const constants = require('../constants')
const items = require('../items')
const relics = require('../relics')
const util = require('../util')

const tileIdOffset = constants.tileIdOffset
const TYPE = constants.TYPE
const typeNames = constants.typeNames
const ZONE = constants.ZONE
const zones = constants.zones

// Read input bin.
const bin = fs.readFileSync(process.argv[2])

// Read zone data.
const zoneId = ZONE[process.argv[3]]
const data = util.restoreFile(bin, zones[zoneId])

// Read data.
const rooms = util.entityData(data).map(function(entities, index) {
  const lines = []
  lines.push('room ' + index)
  entities.forEach(function(entity) {
    lines.push(' addresses: ' + entity.addresses.map(function(address) {
      return util.numToHex(util.romOffset(zones[zoneId], address))
    }).join(' '))
    lines.push('    data: ' + entity.data.toString('hex'))
    if (util.isCandle(zoneId, entity)) {
      const state = (entity.data[9] << 8) + entity.data[8]
      const candle = (state & 0xf000) >>> 8
      const id = state & 0x0fff
      const item = util.itemFromTileId(items, id)
      lines.push('    candle: ' + item.name)
    } else if (util.isRelic(entity)) {
      const relic = relics.filter(function(relic) {
        return relic.id === entity.data[8]
      })[0]
      lines.push('    relic: ' + relic.name)
    } else if (util.isItem(entity)) {
      const index = entity.data[8]
      const id = data.readUInt16LE(zones[zoneId].items + 0x2 * index)
      const item = util.itemFromTileId(items, id)
      if (item) {
        lines.push('    item: ' + item.name)
      }
    }
  })
  return lines.join('\n')
})

// Dump data.
console.log(rooms.join('\n\n'))
