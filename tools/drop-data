#!/usr/bin/env node
// This tool parses a SotN bin for drop data, adds it the global item list
// and prints the modified list to stdout.
// Usage: tools/drop-data <path-to-rom> [indent-level]

const fs = require('fs')
const constants = require('../constants')
const enemies = require('../enemies')
const items = require('../items')
const util = require('../util')

const tileIdOffset = constants.tileIdOffset
const TYPE = constants.TYPE
const ZONE = constants.ZONE
const GLOBAL_DROP = constants.GLOBAL_DROP
const zones = constants.zones

// Clear existing drop data from item list.
items.filter(function(item) {
  return !!item.tiles
}).forEach(function(item) {
  item.tiles = (item.tiles || []).filter(function(tile) {
    return typeof(tile.enemy) === 'undefined'
  })
})

// Read input bin.
const bin = fs.readFileSync(process.argv[2])
// Add tiles.
enemies.forEach(function(enemy) {
  enemy.dropAddresses.forEach(function(address) {
    const id = bin.readUInt16LE(address)
    if (id === 0) {
      return
    }
    const item = util.itemFromTileId(items, id)
    item.tiles = item.tiles || []
    let tile = item.tiles.filter(function(tile) {
      return tile.enemy === enemy.id
    })[0]
    if (tile) {
      tile.addresses.push(address)
    } else {
      item.tiles.push({
        addresses: [ address ],
        enemy: enemy.id,
      })
    }
  })
})

// The Short Sword and Red Rust dropped by the Bone Scimitars in the Entrance
// are hardcoded.
const shortSword = items.filter(function(item) {
  return item.name === 'Short Sword'
})[0]
shortSword.tiles.push({
  addresses: [ 0x04bc9324 ],
  enemy: 9,
  noOffset: true,
})
const redRust = items.filter(function(item) {
  return item.name === 'Red Rust'
})[0]
redRust.tiles.push({
  addresses: [ 0x04bc9328 ],
  enemy: 9,
  noOffset: true,
})

// Find occurences of global drops.
const globalDrops = [[
  0x043c3610,
  0x044917e0,
  0x0455cc60,
  0x045e99b8,
  0x04677558,
  0x048fb154,
  0x049d3a24,
  0x04aa1a40,
  0x04b68ae8,
  0x04c328ec,
  0x04cfbd2c,
  0x04da5734,
  0x04e327d0,
  0x04ee32fc,
  0x04f86070,
  0x05050944,
  0x050f8e70,
  0x051ade84,
  0x0526c720,
  0x053f6464,
  0x054b290c,
  0x05573db0,
  0x0560fbe0,
  0x056be924,
  0x05751978,
  0x057e0778,
  0x05883f48,
  0x05903618,
  0x059bca04,
  0x05a6ee98,
  0x05af32a4,
  0x0606f0d8,
  0x060fdd0c,
  0x061a7790,
  0x06247898,
  0x06306188,
  0x063aafe0,
  0x06471a08,
  0x065094bc,
  0x065918b8,
  0x06621d08,
  0x066b4090,
  0x06742ea8,
  0x067d0d04,
  0x06862054,
  0x0692c45c,
  0x069d21f0,
  0x06a611d4,
], [
  0x04871a30,
  0x05b87ad4,
  0x05c5dc4c,
  0x05d36234,
  0x05ed4a20,
]]
globalDrops.forEach(function(globalDrops) {
  for (let i = 0; i < constants.globalDropsCount; i++) {
    const id = bin.readUInt16LE(globalDrops[0] + 2 * i)
    const item = util.itemFromTileId(items, id)
    const addresses = globalDrops.map(function(address) {
      return address + 2 * i
    })
    item.tiles = item.tiles || []
    item.tiles.push({
      addresses: addresses,
      enemy: GLOBAL_DROP,
    })
  }
})

// Format data.
const indent = parseInt(process.argv[3] || 2)
const spaces = Array(indent).fill(' ').join('')
console.log(spaces + 'const items = ' + util.formatObject(items, indent))
