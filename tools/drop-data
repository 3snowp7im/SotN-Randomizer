#!/usr/bin/env node
// This tool parses a SotN bin for drop data, adds it the global item list
// and prints the modified list to stdout.
// Usage: tools/drop-data <path-to-rom> [indent-level]

const fs = require('fs')
const constants = require('../src/constants')
const enemies = require('../src/enemies')
const items = require('../src/items')
const util = require('../src/util')

const tileIdOffset = constants.tileIdOffset
const TYPE = constants.TYPE
const ZONE = constants.ZONE
const GLOBAL_DROP = constants.GLOBAL_DROP
const globalDropsCount = constants.globalDropsCount
const zones = constants.zones
const enemiesDrops = enemies.enemiesDrops

// Clear existing drop data from item list.
items.filter(function(item) {
  return !!item.tiles
}).forEach(function(item) {
  item.tiles = (item.tiles || []).filter(function(tile) {
    return typeof(tile.enemy) === 'undefined'
  })
})

// Read input bin.
const bin = fs.readFileSync(process.argv[2])
// Add tiles.
enemiesDrops.forEach(function(enemy) {
  enemy.dropAddresses.forEach(function(address) {
    const id = bin.readUInt16LE(address)
    if (id === 0) {
      return
    }
    const item = util.itemFromTileId(items, id)
    item.tiles = item.tiles || []
    let tile = item.tiles.filter(function(tile) {
      return tile.enemy === enemy.id
    })[0]
    if (tile) {
      tile.addresses.push(address)
    } else {
      item.tiles.push({
        addresses: [ address ],
        enemy: enemy.id,
      })
    }
  })
})

// The Short Sword and Red Rust dropped by the Bone Scimitars in the Entrance
// are hardcoded.
const shortSword = items.filter(function(item) {
  return item.name === 'Short Sword'
})[0]
shortSword.tiles.push({
  addresses: [ 0x04bc9324 ],
  enemy: 9,
  noOffset: true,
})
const redRust = items.filter(function(item) {
  return item.name === 'Red Rust'
})[0]
redRust.tiles.push({
  addresses: [ 0x04bc9328 ],
  enemy: 9,
  noOffset: true,
})

// Find occurences of global drops.
const globalDrops = [[{
  address: 0x043c3610,
  count: globalDropsCount,
}], [{
  address: 0x044917e0,
  count: globalDropsCount,
}], [{
  address: 0x0455cc60,
  count: globalDropsCount,
}], [{
  address: 0x045e99b8,
  count: globalDropsCount,
}], [{
  address: 0x04677558,
  count: globalDropsCount,
}], [{
  address: 0x048fb154,
  count: globalDropsCount,
}], [{
  address: 0x049d3a24,
  count: globalDropsCount,
}], [{
  address: 0x04aa1a40,
  count: globalDropsCount,
}], [{
  address: 0x04b68ae8,
  count: globalDropsCount,
}], [{
  address: 0x04c328ec,
  count: globalDropsCount,
}], [{
  address: 0x04cfbd2c,
  count: globalDropsCount,
}], [{
  address: 0x04da5734,
  count: globalDropsCount,
}], [{
  address: 0x04e327d0,
  count: globalDropsCount,
}], [{
  address: 0x04ee32fc,
  count: globalDropsCount,
}], [{
  address: 0x04f86070,
  count: globalDropsCount,
}], [{
  address: 0x05050944,
  count: globalDropsCount,
}], [{
  address: 0x050f8e70,
  count: globalDropsCount,
}], [{
  address: 0x051ade84,
  count: globalDropsCount,
}], [{
  address: 0x0526c720,
  count: globalDropsCount,
}], [{
  address: 0x053f6464,
  count: globalDropsCount,
}], [{
  address: 0x054b290c,
  count: globalDropsCount,
}], [{
  address: 0x05573db0,
  count: globalDropsCount,
}], [{
  address: 0x0560fbe0,
  count: globalDropsCount,
}], [{
  address: 0x056be924,
  count: globalDropsCount,
}], [{
  address: 0x05751978,
  count: globalDropsCount,
}], [{
  address: 0x057e0778,
  count: globalDropsCount,
}], [{
  address: 0x05883f48,
  count: globalDropsCount,
}], [{
  address: 0x05903618,
  count: globalDropsCount,
}], [{
  address: 0x059bca04,
  count: globalDropsCount,
}], [{
  address: 0x05a6ee98,
  count: globalDropsCount,
}], [{
  address: 0x05af32a4,
  count: globalDropsCount,
}], [{
  address: 0x0606f0d8,
  count: globalDropsCount,
}], [{
  address: 0x060fdd0c,
  count: globalDropsCount,
}], [{
  address: 0x061a7790,
  count: globalDropsCount,
}], [{
  address: 0x06247898,
  count: globalDropsCount,
}], [{
  address: 0x06306188,
  count: globalDropsCount,
}], [{
  address: 0x063aafe0,
  count: globalDropsCount,
}], [{
  address: 0x06471a08,
  count: globalDropsCount,
}], [{
  address: 0x065094bc,
  count: globalDropsCount,
}], [{
  address: 0x065918b8,
  count: globalDropsCount,
}], [{
  address: 0x06621d08,
  count: globalDropsCount,
}], [{
  address: 0x066b4090,
  count: globalDropsCount,
}], [{
  address: 0x06742ea8,
  count: globalDropsCount,
}], [{
  address: 0x067d0d04,
  count: globalDropsCount,
}], [{
  address: 0x06862054,
  count: globalDropsCount,
}], [{
  address: 0x0692c45c,
  count: globalDropsCount,
}], [{
  address: 0x069d21f0,
  count: globalDropsCount,
}], [{
  address: 0x06a611d4,
  count: globalDropsCount,
}], [{
  address: 0x047a3e74,
  count: 2,
}, {
  address: 0x047a3fa8,
  count: globalDropsCount - 2,
}]]

const globalItems = []
for (let i = 0; i < globalDropsCount; i++) {
  const id = bin.readUInt16LE(globalDrops[0][0].address + 2 * i)
  globalItems.push(util.itemFromTileId(items, id))
}

globalItems.forEach(function(item, i) {
  const addresses = globalDrops.map(function(ranges) {
    let address
    let count = 0
    for (let j = 0; j < ranges.length; j++) {
      if (i < count + ranges[j].count) {
        address = ranges[j].address
        break
      }
      count += ranges[j].count
    }
    return address + 2 * (i - count)
  })
  item.tiles = item.tiles || []
  item.tiles.push({
    addresses: addresses,
    enemy: GLOBAL_DROP,
  })
})

// Format data.
const indent = parseInt(process.argv[3] || 2)
const spaces = Array(indent).fill(' ').join('')
console.log(spaces + 'const items = ' + util.formatObject(items, indent))
