#!/usr/bin/env node
// This tool parses a SotN bin for relic data and prints
// the list to stdout.
// Usage: tools/relic-data <path-to-rom> [indent-level]

const fs = require('fs')
const constants = require('../constants')
const items = require('../items')
const relics = require('../relics')
const util = require('../util')

const tileIdOffset = constants.tileIdOffset
const TYPE = constants.TYPE
const typeNames = constants.typeNames
const RELIC = constants.RELIC
const ZONE = constants.ZONE
const zones = constants.zones

function findRelicAddresses(zoneId, zone, data) {
  data = util.restoreFile(data, zone)
  const entities = util.entityData(data).reduce(function(flat, array) {
    return flat.concat(array)
  }, [])
  entities.filter(util.isRelic).forEach(function(entity) {
    const id = entity.data[8]
    const relic = relics.filter(function(relic) {
      return relic.id === id
    })[0]
    const addresses = entity.addresses.map(function(address) {
      return util.romOffset(zone, address + 8)
    })
    Array.prototype.push.apply(relic.addresses, addresses)
  })
}

function relicFromAbility(ability) {
  return relics.filter(function(relic) {
    return relic.ability === ability
  })[0]
}

// Strip addresses from existing relic data.
relics.forEach(function(relic) {
  relic.addresses = []
})

// Add relics that aren't in entity data.
relicFromAbility(RELIC.SKILL_OF_WOLF).addresses.push(
  util.romOffset(zones[ZONE.NZ0], 0x0fa2),
)
relicFromAbility(RELIC.JEWEL_OF_OPEN).addresses.push(
  util.romOffset(zones[ZONE.LIB], 0x14d4),
)
relicFromAbility(RELIC.BAT_CARD).addresses.push(
  util.romOffset(zones[ZONE.NZ0], 0x0fa0),
)
relicFromAbility(RELIC.RING_OF_VLAD).addresses.push(
  util.romOffset(zones[ZONE.RNZ1], 0x0272fc),
  util.romOffset(zones[ZONE.RNZ1], 0x02c85c),
)

// Read input bin.
const bin = fs.readFileSync(process.argv[2])

// Read entity data.
zones.forEach(function(zone, zoneId) {
  findRelicAddresses(zoneId, zone, bin)
})

// Patch reward data.
const relicRewards = [
  [ RELIC.HEART_OF_VLAD, zones[ZONE.RBO3] ],
  [ RELIC.TOOTH_OF_VLAD, zones[ZONE.RBO4] ],
  [ RELIC.RIB_OF_VLAD, zones[ZONE.RBO7] ],
  [ RELIC.RING_OF_VLAD, zones[ZONE.RNZ1] ],
  [ RELIC.EYE_OF_VLAD, zones[ZONE.RBO2] ],
]
relicRewards.forEach(function(relicReward, index) {
  const relic = relicFromAbility(relicReward[0])
  const zone = relicReward[1]
  relic.addresses.push(util.romOffset(zone, zone.rewards + 0x22 + 2 * index))
})

// Format data.
const indent = parseInt(process.argv[3] || 2)
const spaces = Array(indent).fill(' ').join('')
console.log(spaces + 'const relics = ' + util.formatObject(relics, indent))
